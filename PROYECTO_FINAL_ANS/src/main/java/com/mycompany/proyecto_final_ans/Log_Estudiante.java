/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto_final_ans;

import java.awt.Color;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yo breyner saul
 */
public class Log_Estudiante extends javax.swing.JFrame {

    /**
     * Creates new form Log_Estudiante
     */
    public Log_Estudiante() {
      
        initComponents();
           getContentPane().setBackground(Color.DARK_GRAY);
        setLocationRelativeTo(null);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        numerodocumento = new javax.swing.JTextField();
        regresar = new javax.swing.JButton();
        aceptar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TBestudiante = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        equipo_sala = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("DIGITE SU NUMERO DE DOCUMENTO DE IDENTIDAD ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, 400, 36));
        getContentPane().add(numerodocumento, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 70, 370, 40));

        regresar.setBackground(new java.awt.Color(102, 204, 255));
        regresar.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        regresar.setForeground(new java.awt.Color(255, 255, 255));
        regresar.setText("REGRESAR");
        regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarActionPerformed(evt);
            }
        });
        getContentPane().add(regresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 340, 120, -1));

        aceptar.setBackground(new java.awt.Color(51, 204, 255));
        aceptar.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        aceptar.setForeground(new java.awt.Color(255, 255, 255));
        aceptar.setText("ACEPTAR");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });
        getContentPane().add(aceptar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 340, 130, -1));
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 450, 40));

        TBestudiante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "IDusuario", "Numerodocumento", "Nombres", "Apellidos", "Semestre", "Jornada", "Programa", "Tipousuario", "Facultad", "Numeroelular", "Dependencia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TBestudiante);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 1150, 60));

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("EQUIPO  Y NUMERO DE SALA ASIGNADOS");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 190, 260, -1));

        equipo_sala.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID_Prestamo", "Descripcion", "Bloqueado", "Usuario", "NO_identidad", "ID_Equipo", "Equipo", "Descripcion_Equipo", "Sala_Equipo", "Tipo_Equipo", "Documentoidentidad_Aux", " Nombres_aux", "Apellidos_aux "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(equipo_sala);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, 1150, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarActionPerformed
        dispose();
        
        INICIO inicio = new INICIO();
        inicio.setVisible(true);
    }//GEN-LAST:event_regresarActionPerformed

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
  
 
     int numerodoc = 0;

    try {
        numerodoc = Integer.parseInt(numerodocumento.getText());

        CONEXION objetoConexion = new CONEXION();
        String consulta = "SELECT idusuario, numerodocumento, nombres, apellidos, semestre, jornada, programa, tipousuario, facultad, numerocelular, dependencia FROM usuario WHERE numerodocumento = ?";
        
        try {
            CallableStatement ps = objetoConexion.estableceConexion().prepareCall(consulta);
            ps.setInt(1, numerodoc);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                // Usuario encontrado en la base de datos
                JOptionPane.showMessageDialog(null, "Usuario encontrado en la base de datos");

                // Clear existing rows in the table
                
                
                DefaultTableModel model = (DefaultTableModel) TBestudiante.getModel();
                model.setRowCount(0);

                // Add the found user data to the table
                model.addRow(new Object[]{
                        rs.getInt("idusuario"),
                        rs.getInt("numerodocumento"),
                        rs.getString("nombres"),
                        rs.getString("apellidos"),
                        rs.getInt("semestre"),
                        rs.getString("jornada"),
                        rs.getString("programa"),
                        rs.getString("tipousuario"),
                        rs.getString("facultad"),
                        rs.getString("numerocelular"),
                        rs.getString("dependencia")
                });
                String equipoConsulta = "SELECT idprestamo_SALAS, descripcion, bloqueado, usuario, numerodocumento, idequipo, equipo, descripcion_equipo, sala_del_equipo, tipoequipo, documentoidentidad_aux, nombres_aux, apellidos_aux FROM prestamo_SALAS WHERE numerodocumento = ?";
                PreparedStatement psEquipo = objetoConexion.estableceConexion().prepareStatement(equipoConsulta);
                psEquipo.setInt(1, numerodoc);
                ResultSet rsEquipo = psEquipo.executeQuery();

                // Clear existing rows in the equipment table
                DefaultTableModel equipoModel = (DefaultTableModel) equipo_sala.getModel();
                equipoModel.setRowCount(0);


                // Add the found equipment data to the equipment table
                while (rsEquipo.next()) {
                    equipoModel.addRow(new Object[]{
                            rsEquipo.getInt("idprestamo_SALAS"),
                            rsEquipo.getString("descripcion"),
                             rsEquipo.getString("bloqueado"),
                               rsEquipo.getString("usuario"),
                               rsEquipo.getInt("numerodocumento"),
                               rsEquipo.getInt("idequipo"),
                                rsEquipo.getString("equipo"),
                            rsEquipo.getString("descripcion_equipo"),
                              rsEquipo.getString("sala_del_equipo"),
                                rsEquipo.getString("tipoequipo"),
                                 rsEquipo.getInt("documentoidentidad_aux"),
                             rsEquipo.getString("nombres_aux"),
                         rsEquipo.getString("apellidos_aux")
                    });
                    }

// Check if there are no rows in rsEquipo
if (!rsEquipo.isBeforeFirst()) {
    // No hay datos registrados en la tabla prestamo_SALAS para este usuario
    JOptionPane.showMessageDialog(null, "Espere un momento mientras se le asigna equipo y sala.");
}
                
                
            } else {
                JOptionPane.showMessageDialog(null, "Usuario no encontrado en la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al verificar usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ingrese un número de documento válido.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
        /*------------------------------------------------sala_equipo-----------------------------------*/


    
     
                       
    
    // ... Otros métodos y propiedades ...

        
    


   
      

    
    }//GEN-LAST:event_aceptarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Log_Estudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Log_Estudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Log_Estudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Log_Estudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Log_Estudiante().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TBestudiante;
    private javax.swing.JButton aceptar;
    private javax.swing.JTable equipo_sala;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField numerodocumento;
    private javax.swing.JButton regresar;
    // End of variables declaration//GEN-END:variables
}
